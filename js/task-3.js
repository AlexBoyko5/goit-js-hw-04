// function filterArray(numbers, value) {//* Оголошуємо функцію*/

//   //* Створюємо порожній масив для чисел/
//   let resultArray = [];

//   //* Проходимо циклом по кожнму елементу масиву/
//   for (let i = 0; i < numbers.length; i++) {

//     //*Перевірка, чи поточний елемент більший за задане значення
//     if (numbers[i] > value) {

//       //* Додаємо поточне число до масиву
//       resultArray.push(numbers[i]);
//     }
//   }
//   //* Повертаємо масив чисел*/
//   return resultArray;
// }

// //~ (i < numbers.length;) каже, що ми хочемо ітерувати кожен елемент масиву numbers, а не порівнювати його зі значенням value.
// //~Умова (i < numbers.length) означає, що цикл буде продовжуватися, доки i менше довжини масиву numbers.
// //~ Це дозволяє нам ітерувати кожен елемент масиву, незалежно від його значення.
// //~ якщо написати (for (let i = 0; i > value; i++) -(числа numbers, які більші за значення value)=>
// //~замість (for (let i = 0; i < numbers.length; i++))
// //~ то цикл не буде ітерувати кожен елемент масиву numbers, а буде перевіряти, чи є значення i більшим за value.
// //~Це може призвести до того, що цикл не буде виконуватися жодного разу, якщо value більше, ніж довжина масиву numbers.
// //~Якщо value менше, ніж довжина масиву numbers, то цикл буде виконуватися, але не для кожного елемента масиву numbers.


// console.log(filterArray([1, 2, 3, 4, 5], 3)); // [4, 5]
// console.log(filterArray([1, 2, 3, 4, 5], 4)); // [5]
// console.log(filterArray([1, 2, 3, 4, 5], 5)); // []
// console.log(filterArray([12, 24, 8, 41, 76], 38)); // [41, 76]
// console.log(filterArray([12, 24, 8, 41, 76], 20)); // [24, 41, 76]

